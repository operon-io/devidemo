/**
 * MappingMapToworktimeJson.java
 *
 * This file was generated by MapForce 2022r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.mapforce;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToworktimeJson extends com.altova.TraceProvider {
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}


	static class main implements IEnumerable {
		com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance;

		public main(com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance)	{
			this.var1_Ty_ajanseuranta_CSV_Instance = var1_Ty_ajanseuranta_CSV_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 2;
			Object current;
			main closure;

			public Enumerator(main closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 2: if (moveNext_2()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Json.CreateArray((new seq1_map(closure.var1_Ty_ajanseuranta_CSV_Instance)));
				pos++;
				return true;
			}


			public void close() {
			}
		}
	}
	static class seq1_map implements IEnumerable {
		com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance;

		public seq1_map(com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance)	{
			this.var1_Ty_ajanseuranta_CSV_Instance = var1_Ty_ajanseuranta_CSV_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq1_map closure;
			IEnumerator var2_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var3_filter_elements_nodename;

			public Enumerator(seq1_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Rows", closure.var1_Ty_ajanseuranta_CSV_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("id", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				current = com.altova.functions.Json.CreateObject((new seq2_join(var3_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq2_join implements IEnumerable {
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_cur;

		public seq2_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_cur)	{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_cur = var2_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			IEnumerator var3_create_member;
			IEnumerator var4_create_member;
			IEnumerator var5_create_member;
			IEnumerator var6_create_member;
			IEnumerator var7_create_member;
			IEnumerator var8_create_member;

			public Enumerator(seq2_join closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
						case 5: if (moveNext_5()) return true; break;
						case 6: if (moveNext_6()) return true; break;
						case 8: if (moveNext_8()) return true; break;
						case 9: if (moveNext_9()) return true; break;
						case 11: if (moveNext_11()) return true; break;
						case 12: if (moveNext_12()) return true; break;
						case 14: if (moveNext_14()) return true; break;
						case 15: if (moveNext_15()) return true; break;
						case 17: if (moveNext_17()) return true; break;
						case 18: if (moveNext_18()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_create_member = (com.altova.functions.Json.CreateMember("person_id", (new seq3_map(closure.var1_filter_elements_nodename)))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_create_member.moveNext()) {state = 3; return false; }
				current = var3_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if( var3_create_member != null ) { var3_create_member.close(); var3_create_member = null; }
				var4_create_member = (com.altova.functions.Json.CreateMember("date", (new seq4_map(closure.var2_cur)))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_create_member.moveNext()) {state = 6; return false; }
				current = var4_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if( var4_create_member != null ) { var4_create_member.close(); var4_create_member = null; }
				var5_create_member = (com.altova.functions.Json.CreateMember("arrival_ts", (new seq5_map(closure.var2_cur)))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_create_member.moveNext()) {state = 9; return false; }
				current = var5_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				if( var5_create_member != null ) { var5_create_member.close(); var5_create_member = null; }
				var6_create_member = (com.altova.functions.Json.CreateMember("departure_ts", (new seq6_map(closure.var2_cur)))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 11;				
				if (!var6_create_member.moveNext()) {state = 12; return false; }
				current = var6_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 14;				
				if( var6_create_member != null ) { var6_create_member.close(); var6_create_member = null; }
				var7_create_member = (com.altova.functions.Json.CreateMember("extra_info", (new seq7_map(closure.var2_cur)))).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 14;				
				if (!var7_create_member.moveNext()) {state = 15; return false; }
				current = var7_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if( var7_create_member != null ) { var7_create_member.close(); var7_create_member = null; }
				var8_create_member = (com.altova.functions.Json.CreateMember("code", (new seq8_map(closure.var1_filter_elements_nodename)))).enumerator();
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 17;				
				if (!var8_create_member.moveNext()) {state = 18; return false; }
				current = var8_create_member.current();
				pos++;
				return true;
			}
			private boolean moveNext_18() throws Exception {
				state = 0;				
				if( var8_create_member != null ) { var8_create_member.close(); var8_create_member = null; }
				return false;
			}


			public void close() {
				try {
					if( var3_create_member != null ) { var3_create_member.close(); var3_create_member = null; }
					if( var4_create_member != null ) { var4_create_member.close(); var4_create_member = null; }
					if( var5_create_member != null ) { var5_create_member.close(); var5_create_member = null; }
					if( var6_create_member != null ) { var6_create_member.close(); var6_create_member = null; }
					if( var7_create_member != null ) { var7_create_member.close(); var7_create_member = null; }
					if( var8_create_member != null ) { var8_create_member.close(); var8_create_member = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq3_map implements IEnumerable {
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;

		public seq3_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)	{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq3_map closure;
			IEnumerator var2_filter_elements_nodename;

			public Enumerator(seq3_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Json.CreateString(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq4_map implements IEnumerable {
		com.altova.mapforce.IMFNode var1_cur;

		public seq4_map(com.altova.mapforce.IMFNode var1_cur)	{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq4_map closure;
			IEnumerator var2_filter_elements_nodename;

			public Enumerator(seq4_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("date", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Json.CreateString(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq5_map implements IEnumerable {
		com.altova.mapforce.IMFNode var1_cur;

		public seq5_map(com.altova.mapforce.IMFNode var1_cur)	{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq5_map closure;
			IEnumerator var2_filter_elements_nodename;

			public Enumerator(seq5_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("arrival", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Json.CreateString(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq6_map implements IEnumerable {
		com.altova.mapforce.IMFNode var1_cur;

		public seq6_map(com.altova.mapforce.IMFNode var1_cur)	{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq6_map closure;
			IEnumerator var2_filter_elements_nodename;

			public Enumerator(seq6_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("departure", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Json.CreateString(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq7_map implements IEnumerable {
		com.altova.mapforce.IMFNode var1_cur;

		public seq7_map(com.altova.mapforce.IMFNode var1_cur)	{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map closure;
			IEnumerator var2_filter_elements_nodename;

			public Enumerator(seq7_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("extra_info", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Json.CreateString(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class seq8_map implements IEnumerable {
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;

		public seq8_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)	{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			seq8_map closure;
			IEnumerator var2_filter;

			public Enumerator(seq8_map closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.equalOrGreater(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter.current())))), new java.math.BigDecimal("37")))) {state = 2; return false; }
				current = com.altova.functions.Json.CreateString("CHECK");
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter != null ) { var2_filter.close(); var2_filter = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_filter != null ) { var2_filter.close(); var2_filter = null; }
				} catch (Exception e) {
				}
			}
		}
	}
	static class Outer implements IEnumerable {
		com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance;

		public Outer(com.altova.mapforce.IMFNode var1_Ty_ajanseuranta_CSV_Instance)	{
			this.var1_Ty_ajanseuranta_CSV_Instance = var1_Ty_ajanseuranta_CSV_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}

		public static class Enumerator implements IEnumerator {
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;

			public Enumerator(Outer closure) {
				this.closure = closure;
			}

			public Object current() {return current;}

			public int position() {return pos;}

			public boolean moveNext() throws Exception {
				while (state != 0) {
					switch (state) {
						case 1: if (moveNext_1()) return true; break;
						case 2: if (moveNext_2()) return true; break;
						case 3: if (moveNext_3()) return true; break;
					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_Ty_ajanseuranta_CSV_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				return false;
			}


			public void close() {
				try {
					if( var2_box != null ) { var2_box.close(); var2_box = null; }
				} catch (Exception e) {
				}
			}
		}
	}


	// instances
	protected com.altova.text.tablelike.Table varTy_ajanseuranta_CSVInstance;

	public void run(String Ty_ajanseuranta_CSVSourceFilename, String worktimeJson2TargetFilename) throws Exception {
		try(
			// open source streams
			com.altova.io.FileInput Ty_ajanseuranta_CSVSource = new com.altova.io.FileInput(Ty_ajanseuranta_CSVSourceFilename);
		// open target stream
			com.altova.io.FileOutput worktimeJson2Target = new com.altova.io.FileOutput(worktimeJson2TargetFilename);

		) {
			// run
			run(Ty_ajanseuranta_CSVSource, worktimeJson2Target);

		}
	}


	// main entry point

	public void run(com.altova.io.Input Ty_ajanseuranta_CSVSource, com.altova.io.Output worktimeJson2Target) throws Exception {
		try {
			// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.altova.text.tablelike.csv.Table Ty_ajanseuranta_CSVInstanceObject = new com.altova.text.tablelike.csv.Table(com.mapforce.example_csv.example_csv_TypeInfo.binder.getTypes()[com.mapforce.example_csv.example_csv_TypeInfo._altova_ti_altova_RowsType],0);
		varTy_ajanseuranta_CSVInstance = Ty_ajanseuranta_CSVInstanceObject;
		com.altova.text.tablelike.Table Ty_ajanseuranta_CSVSourceObject = varTy_ajanseuranta_CSVInstance;
Ty_ajanseuranta_CSVInstanceObject.getFormat().setAssumeFirstRowAsHeaders( true );
Ty_ajanseuranta_CSVInstanceObject.getFormat().setFieldDelimiter( ';' );
Ty_ajanseuranta_CSVInstanceObject.getFormat().setRemoveEmpty( true );
Ty_ajanseuranta_CSVInstanceObject.getFormat().setQuoteCharacter( '\"' );
		varTy_ajanseuranta_CSVInstance.setEncoding( "UTF-8", false, false );
		varTy_ajanseuranta_CSVInstance.parse(Ty_ajanseuranta_CSVSource);
		if (runDoesCloseAll)
			Ty_ajanseuranta_CSVSource.close();

			// Create the target

			// Execute mapping

			main mapping = new main(new com.altova.text.TableAsMFNodeAdapter(varTy_ajanseuranta_CSVInstance, Ty_ajanseuranta_CSVSource.getFilename()));

			com.altova.functions.Json.Write(mapping, worktimeJson2Target, true, false, false);
			// Close the target


		}
		finally {

			if (runDoesCloseAll) {
				Ty_ajanseuranta_CSVSource.close();
			worktimeJson2Target.close();
			}

		}
	}


}
